// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Brewery;
//
//    var breweryJson = BreweryJson.FromJson(jsonString);

namespace Brewery
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class BreweryJson
    {
        [JsonProperty("reviews")]
        public Review[] Reviews { get; set; }

        [JsonProperty("total")]
        public long Total { get; set; }

        [JsonProperty("possibleLanguages")]
        public PossibleLanguage[] PossibleLanguages { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("alias")]
        public string Alias { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("imageUrl")]
        public Uri ImageUrl { get; set; }

        [JsonProperty("isClosed")]
        public bool IsClosed { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("reviewCount")]
        public long ReviewCount { get; set; }

        [JsonProperty("categories")]
        public Category[] Categories { get; set; }

        [JsonProperty("rating")]
        public double Rating { get; set; }

        [JsonProperty("coordinates")]
        public Coordinates Coordinates { get; set; }

        [JsonProperty("transactions")]
        public string[] Transactions { get; set; }

        [JsonProperty("price")]
        public Price Price { get; set; }

        [JsonProperty("location")]
        public Location Location { get; set; }

        [JsonProperty("phone")]
        public string Phone { get; set; }

        [JsonProperty("displayPhone")]
        public string DisplayPhone { get; set; }

        [JsonProperty("distance")]
        public double Distance { get; set; }
    }

    public partial class Category
    {
        [JsonProperty("alias")]
        public string Alias { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }
    }

    public partial class Coordinates
    {
        [JsonProperty("latitude")]
        public double Latitude { get; set; }

        [JsonProperty("longitude")]
        public double Longitude { get; set; }
    }

    public partial class Location
    {
        [JsonProperty("address1")]
        public string Address1 { get; set; }

        [JsonProperty("address2")]
        public string Address2 { get; set; }

        [JsonProperty("address3")]
        public string Address3 { get; set; }

        [JsonProperty("city")]
        public string City { get; set; }

        [JsonProperty("zipCode")]
        public long ZipCode { get; set; }

        [JsonProperty("country")]
        public Country Country { get; set; }

        [JsonProperty("state")]
        public State State { get; set; }

        [JsonProperty("displayAddress")]
        public string[] DisplayAddress { get; set; }
    }

    public partial class Review
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("rating")]
        public long Rating { get; set; }

        [JsonProperty("timeCreated")]
        public DateTimeOffset TimeCreated { get; set; }

        [JsonProperty("user")]
        public User User { get; set; }
    }

    public partial class User
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("profileUrl")]
        public Uri ProfileUrl { get; set; }

        [JsonProperty("imageUrl")]
        public Uri ImageUrl { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public enum Country { Us };

    public enum State { In, Ky, Oh };

    public enum PossibleLanguage { En, Ja };

    public enum Price { Empty, Price, Purple };

    public partial class BreweryJson
    {
        public static BreweryJson[] FromJson(string json) => JsonConvert.DeserializeObject<BreweryJson[]>(json, Brewery.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this BreweryJson[] self) => JsonConvert.SerializeObject(self, Brewery.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                CountryConverter.Singleton,
                StateConverter.Singleton,
                PossibleLanguageConverter.Singleton,
                PriceConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class CountryConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Country) || t == typeof(Country?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "US")
            {
                return Country.Us;
            }
            throw new Exception("Cannot unmarshal type Country");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Country)untypedValue;
            if (value == Country.Us)
            {
                serializer.Serialize(writer, "US");
                return;
            }
            throw new Exception("Cannot marshal type Country");
        }

        public static readonly CountryConverter Singleton = new CountryConverter();
    }

    internal class StateConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(State) || t == typeof(State?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "IN":
                    return State.In;
                case "KY":
                    return State.Ky;
                case "OH":
                    return State.Oh;
            }
            throw new Exception("Cannot unmarshal type State");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (State)untypedValue;
            switch (value)
            {
                case State.In:
                    serializer.Serialize(writer, "IN");
                    return;
                case State.Ky:
                    serializer.Serialize(writer, "KY");
                    return;
                case State.Oh:
                    serializer.Serialize(writer, "OH");
                    return;
            }
            throw new Exception("Cannot marshal type State");
        }

        public static readonly StateConverter Singleton = new StateConverter();
    }

    internal class PossibleLanguageConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PossibleLanguage) || t == typeof(PossibleLanguage?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "en":
                    return PossibleLanguage.En;
                case "ja":
                    return PossibleLanguage.Ja;
            }
            throw new Exception("Cannot unmarshal type PossibleLanguage");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PossibleLanguage)untypedValue;
            switch (value)
            {
                case PossibleLanguage.En:
                    serializer.Serialize(writer, "en");
                    return;
                case PossibleLanguage.Ja:
                    serializer.Serialize(writer, "ja");
                    return;
            }
            throw new Exception("Cannot marshal type PossibleLanguage");
        }

        public static readonly PossibleLanguageConverter Singleton = new PossibleLanguageConverter();
    }

    internal class PriceConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Price) || t == typeof(Price?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "$":
                    return Price.Price;
                case "$$":
                    return Price.Empty;
                case "$$$":
                    return Price.Purple;
            }
            throw new Exception("Cannot unmarshal type Price");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Price)untypedValue;
            switch (value)
            {
                case Price.Price:
                    serializer.Serialize(writer, "$");
                    return;
                case Price.Empty:
                    serializer.Serialize(writer, "$$");
                    return;
                case Price.Purple:
                    serializer.Serialize(writer, "$$$");
                    return;
            }
            throw new Exception("Cannot marshal type Price");
        }

        public static readonly PriceConverter Singleton = new PriceConverter();
    }
}
